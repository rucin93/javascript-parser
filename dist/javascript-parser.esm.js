function createCharDec(nr){return eval(`'\\u{${parseInt(nr).toString(16)}}'`)}function anotherTextParser(e){let r="";const t=95,n=(e,r)=>(e%r+r)%r;e=";"+e.replace(/(\r\n|\n|\r)/gm,"\\n"),e+="//";const o=(e+=" ".repeat(2*e.length%3)).length/3;for(let a=0;a<o;a++){const[c,i,s]=[e[a+2*o],e[a+o],e[a]].map(e=>e.charCodeAt(0)-32),l=n(c-i,96)*t+c;let f=n(48*(l-s),97)*t*96+l;f>=55296&&f<=57343&&(f+=884640),r+=String.fromCodePoint(f)}return`for(_=i=98;i--;)for(c of\`${r}\`)_+=String.fromCharCode(c.codePointAt()%i+32);eval(_)`}function numbersParser(e){let r=e;const t=r.length%6;0!==t&&(r+="0".repeat(6-t));let n=`m='';for(x of\`${r.match(new RegExp(".{6}","g")).map(e=>createCharDec(e)).join("")}\`)m+=\`\${x.codePointAt()}\`.padStart(6,0)`;return 0!==t?n+`;m=m.slice(0,-${6-t})`:n}function parseCode(e,r){let t="";return t="NUMBERS"===r.toUpperCase()?numbersParser(e):anotherTextParser(e),t}export default parseCode;
